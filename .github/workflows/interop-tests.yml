name: Interoperability Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'clients/java/**'
      - 'clients/dart/**'
      - '.github/workflows/interop-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'clients/java/**'
      - 'clients/dart/**'
      - '.github/workflows/interop-tests.yml'

jobs:
  interop-tests:
    name: Java-Dart Interoperability Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4
    
    # Setup Java
    - name: Setup JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    
    # Setup Dart
    - name: Setup Dart SDK
      uses: dart-lang/setup-dart@v1
      with:
        sdk: stable
    
    # Copy schemas to resources (required for build)
    - name: Copy schemas to resources
      working-directory: clients/java
      shell: bash
      run: |
        mkdir -p cldf-java/src/main/resources
        rm -rf cldf-java/src/main/resources/schemas
        cp -r ../../schemas cldf-java/src/main/resources/
    
    # Build Java fat JAR (required for QR interop tests)
    - name: Build Java fat JAR
      working-directory: clients/java
      shell: bash
      run: |
        chmod +x gradlew
        ./gradlew :cldf-tool:fatJar
        
        # Verify the JAR was created
        echo "Checking for fat JAR in cldf-tool/build/libs/..."
        ls -la cldf-tool/build/libs/ || echo "Directory not found"
        
        # Find any standalone JAR
        STANDALONE_JAR=$(find cldf-tool/build/libs -name "*standalone*.jar" -type f | head -1)
        if [ -z "$STANDALONE_JAR" ]; then
          echo "ERROR: No standalone JAR found!"
          exit 1
        fi
        
        echo "Found standalone JAR: $STANDALONE_JAR"
        
        # If the JAR name is different from expected, create a symlink
        EXPECTED_JAR="cldf-tool/build/libs/cldf-tool-1.0.0-standalone.jar"
        if [ "$STANDALONE_JAR" != "$EXPECTED_JAR" ]; then
          echo "Creating symlink from $STANDALONE_JAR to $EXPECTED_JAR"
          ln -sf "$(basename "$STANDALONE_JAR")" "$EXPECTED_JAR"
        fi
    
    # Make wrapper script executable
    - name: Make wrapper script executable
      working-directory: clients/java/cldf-tool
      run: chmod +x cldf
      if: runner.os != 'Windows'
    
    # Windows-specific: Create a batch wrapper
    - name: Create Windows wrapper
      working-directory: clients/java/cldf-tool
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        @'
        @echo off
        java -jar "%~dp0build\libs\cldf-tool-1.0.0-standalone.jar" %*
        '@ | Out-File -FilePath cldf.bat -Encoding ASCII
        
        # Verify the batch file was created
        if (Test-Path cldf.bat) {
          Write-Host "Windows wrapper created successfully"
          Get-Content cldf.bat
        } else {
          Write-Error "Failed to create Windows wrapper"
          exit 1
        }
    
    # Prepare Dart tests
    - name: Install Dart dependencies
      working-directory: clients/dart/cldf
      run: |
        dart pub get
        dart run build_runner build --delete-conflicting-outputs
    
    # Verify CLI is accessible from Dart test directory
    - name: Verify CLI accessibility
      working-directory: clients/dart/cldf
      shell: bash
      run: |
        echo "Current directory: $(pwd)"
        echo "Repository root: $(pwd)/../../.."
        echo "Checking directory structure..."
        ls -la ../../.. || true
        echo "Checking Java directory..."
        ls -la ../../java/ || true
        echo "Checking Java cldf-tool directory..."
        ls -la ../../java/cldf-tool/ || true
        
        echo "Checking for Java CLI wrapper..."
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          if [ -f "../../java/cldf-tool/cldf.bat" ]; then
            echo "✓ Found Windows wrapper: ../../java/cldf-tool/cldf.bat"
            # Test if it works
            ../../java/cldf-tool/cldf.bat --version || echo "Note: wrapper test may fail if Java is not in PATH"
          else
            echo "✗ Windows wrapper not found at ../../java/cldf-tool/cldf.bat"
            exit 1
          fi
        else
          if [ -f "../../java/cldf-tool/cldf" ]; then
            echo "✓ Found Unix wrapper: ../../java/cldf-tool/cldf"
            # Test if it works
            ../../java/cldf-tool/cldf --version || echo "Note: wrapper test may fail"
          else
            echo "✗ Unix wrapper not found at ../../java/cldf-tool/cldf"
            exit 1
          fi
        fi
    
    # Run Java tests first (to ensure Java implementation works)
    - name: Run Java tests
      working-directory: clients/java
      run: ./gradlew test
      if: runner.os != 'Windows'
    
    - name: Run Java tests (Windows)
      working-directory: clients/java
      run: .\gradlew.bat test
      if: runner.os == 'Windows'
    
    # Run Dart tests including interop tests
    - name: Run Dart tests with interop
      working-directory: clients/dart/cldf
      run: dart test
      env:
        # Skip flaky interop tests in CI due to known QR library compatibility issues
        SKIP_FLAKY_INTEROP_TESTS: true
        # Set environment variable to skip tests if Java CLI is not available
        SKIP_INTEROP_TESTS_IF_NO_CLI: false
    
    # Upload test results
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: interop-test-results-${{ matrix.os }}
        path: |
          clients/java/cldf-java/build/test-results
          clients/java/cldf-tool/build/test-results
          clients/dart/cldf/test-results.xml
        retention-days: 7
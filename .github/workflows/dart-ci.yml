name: Dart CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'clients/dart/**'
      - '.github/workflows/dart-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'clients/dart/**'
      - '.github/workflows/dart-ci.yml'

jobs:
  # Step 1: Format and analyze
  format-analyze:
    name: Format and Analyze
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: clients/dart/cldf
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Dart SDK
      uses: dart-lang/setup-dart@v1
      with:
        sdk: stable
    
    - name: Install dependencies
      run: dart pub get
    
    - name: Run build_runner
      run: dart run build_runner build --delete-conflicting-outputs
    
    - name: Verify formatting
      run: dart format --output=none --set-exit-if-changed .
    
    - name: Analyze project source
      run: dart analyze
    
  # Step 2: Test
  test:
    name: Test
    needs: format-analyze
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        dart: [stable]
        include:
          - os: ubuntu-latest
            dart: beta
    defaults:
      run:
        working-directory: clients/dart/cldf
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Dart SDK
      uses: dart-lang/setup-dart@v1
      with:
        sdk: ${{ matrix.dart }}
    
    - name: Install dependencies
      run: dart pub get
    
    - name: Run build_runner
      run: dart run build_runner build --delete-conflicting-outputs
    
    - name: Run tests with coverage and JUnit output
      run: |
        dart pub global activate junitreport
        dart test --coverage=coverage --reporter=json | dart pub global run junitreport:tojunit --output test-results.xml
      continue-on-error: true
      env:
        # Skip interop tests in regular Dart CI since Java CLI is not built
        SKIP_INTEROP_TESTS_IF_NO_CLI: 'true'
    
    - name: Install coverage tools
      run: dart pub global activate coverage
      if: matrix.os == 'ubuntu-latest' && matrix.dart == 'stable'
    
    - name: Format coverage
      run: |
        dart pub global run coverage:format_coverage --lcov --in=coverage --out=coverage/lcov.info --report-on=lib
        # Fix paths to be relative for SonarCloud
        sed -i "s|SF:.*clients/dart/cldf/|SF:|g" coverage/lcov.info
      if: matrix.os == 'ubuntu-latest' && matrix.dart == 'stable'
    
    - name: Upload coverage and test reports
      uses: actions/upload-artifact@v4
      if: matrix.os == 'ubuntu-latest' && matrix.dart == 'stable'
      with:
        name: dart-test-reports
        path: |
          clients/dart/cldf/coverage/lcov.info
          clients/dart/cldf/test-results.xml
        retention-days: 7
    
  # Step 3: Build example
  build-example:
    name: Build Example
    needs: test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: clients/dart/cldf
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Dart SDK
      uses: dart-lang/setup-dart@v1
      with:
        sdk: stable
    
    - name: Install dependencies
      run: dart pub get
    
    - name: Run build_runner
      run: dart run build_runner build --delete-conflicting-outputs
    
    - name: Build example
      run: dart compile exe example/cldf_example.dart -o cldf_example
    
    - name: Run example help
      run: ./cldf_example --help
    
    - name: Upload example binary
      uses: actions/upload-artifact@v4
      with:
        name: dart-example
        path: clients/dart/cldf/cldf_example
    
  # Step 4: Package validation
  package-validation:
    name: Package Validation
    needs: test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: clients/dart/cldf
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Dart SDK
      uses: dart-lang/setup-dart@v1
      with:
        sdk: stable
    
    - name: Install dependencies
      run: dart pub get
    
    - name: Run build_runner
      run: dart run build_runner build --delete-conflicting-outputs
    
    - name: Run package validation
      run: dart pub publish --dry-run
    
    - name: Check package score
      run: |
        dart pub global activate pana
        dart pub global run pana --no-warning --exit-code-threshold 40 .
    
  # Step 5: Documentation
  documentation:
    name: Generate Documentation
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: clients/dart/cldf
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Dart SDK
      uses: dart-lang/setup-dart@v1
      with:
        sdk: stable
    
    - name: Install dependencies
      run: dart pub get
    
    - name: Generate documentation
      run: dart doc
    
    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: dart-documentation
        path: clients/dart/cldf/doc/api
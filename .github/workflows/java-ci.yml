name: Java CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'clients/java/**'
      - '.github/workflows/java-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'clients/java/**'
      - '.github/workflows/java-ci.yml'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        java: [21]
    defaults:
      run:
        working-directory: clients/java

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java }}
        distribution: 'temurin'
        
    - name: Copy schemas to resources
      run: |
        mkdir -p cldf-java/src/main/resources
        cp -r ../../schemas cldf-java/src/main/resources/
      shell: bash
      
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      shell: bash
      
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Build and test all modules
      run: ./gradlew build
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-java${{ matrix.java }}
        path: |
          clients/java/cldf-java/build/test-results
          clients/java/cldf-java/build/reports/tests
          clients/java/cldf-tool/build/test-results
          clients/java/cldf-tool/build/reports/tests

    - name: Upload JARs
      uses: actions/upload-artifact@v4
      with:
        name: jars-${{ matrix.os }}-java${{ matrix.java }}
        path: |
          clients/java/cldf-java/build/libs/*.jar
          clients/java/cldf-tool/build/libs/*.jar

  build-native:
    name: Build Native Binary
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: 'amd64'
            native-arch: 'amd64'
          - os: macos-latest
            arch: 'amd64'
            native-arch: 'amd64'
          - os: macos-latest
            arch: 'arm64'
            native-arch: 'aarch64'
          - os: windows-latest
            arch: 'amd64'
            native-arch: 'amd64'
    defaults:
      run:
        working-directory: clients/java

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up GraalVM
      uses: graalvm/setup-graalvm@v1
      with:
        java-version: '21'
        distribution: 'graalvm'
        github-token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Copy schemas to resources
      run: |
        mkdir -p cldf-java/src/main/resources
        cp -r ../../schemas cldf-java/src/main/resources/
      shell: bash
      
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      shell: bash
      
    - name: Debug project structure
      run: |
        echo "Current directory: $(pwd)"
        echo "Project structure:"
        ./gradlew projects
      shell: bash
      
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-native-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-native-
          
    - name: Build native binary
      run: |
        if [[ "${{ matrix.arch }}" == "arm64" && "${{ runner.os }}" == "macOS" ]]; then
          # Cross-compile for ARM64 on Intel Mac
          ./gradlew cldf-tool:nativeCompile -Dorg.graalvm.buildtools.native.architectures=${{ matrix.native-arch }}
        else
          ./gradlew cldf-tool:nativeCompile
        fi
      shell: bash
      
    - name: Test native binary
      run: |
        if [[ "${{ matrix.arch }}" == "arm64" && "${{ runner.os }}" == "macOS" ]]; then
          # Skip testing ARM64 binary on Intel Mac (cross-compiled)
          echo "Skipping test for cross-compiled ARM64 binary"
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          ./cldf-tool/build/native/nativeCompile/cldf.exe --version
        else
          ./cldf-tool/build/native/nativeCompile/cldf --version
        fi
      shell: bash
      
    - name: Upload native binary
      uses: actions/upload-artifact@v4
      with:
        name: cldf-native-${{ matrix.os }}-${{ matrix.arch }}
        path: |
          clients/java/cldf-tool/build/native/nativeCompile/cldf
          clients/java/cldf-tool/build/native/nativeCompile/cldf.exe
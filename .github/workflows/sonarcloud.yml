name: SonarCloud Analysis

on:
  workflow_run:
    workflows: ["Java CI", "Dart CI"]
    types:
      - completed
    branches: [ main, develop ]

jobs:
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    if: >
      github.event.workflow_run.event == 'push' && 
      github.event.workflow_run.conclusion == 'success'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis
    
    # Download Java coverage artifacts
    - name: Download Java coverage
      uses: actions/github-script@v7
      with:
        script: |
          let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
             owner: context.repo.owner,
             repo: context.repo.repo,
             run_id: context.payload.workflow_run.id,
          });
          let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
            return artifact.name == "java-coverage-reports"
          })[0];
          if (matchArtifact) {
            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/java-coverage.zip`, Buffer.from(download.data));
          } else {
            console.log('No Java coverage artifact found');
          }
    
    - name: Extract Java coverage
      run: |
        if [ -f java-coverage.zip ]; then
          unzip -o java-coverage.zip -d clients/java/
          echo "Java coverage extracted"
        else
          echo "No Java coverage to extract"
        fi
    
    # Download Dart coverage artifacts
    - name: Download Dart coverage
      uses: actions/github-script@v7
      with:
        script: |
          let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
             owner: context.repo.owner,
             repo: context.repo.repo,
             run_id: context.payload.workflow_run.id,
          });
          let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
            return artifact.name == "dart-coverage-reports"
          })[0];
          if (matchArtifact) {
            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/dart-coverage.zip`, Buffer.from(download.data));
          } else {
            console.log('No Dart coverage artifact found');
          }
    
    - name: Extract Dart coverage
      run: |
        if [ -f dart-coverage.zip ]; then
          mkdir -p clients/dart/cldf/coverage
          unzip -o dart-coverage.zip -d clients/dart/cldf/coverage/
          echo "Dart coverage extracted"
        else
          echo "No Dart coverage to extract"
        fi
    
    # Java Setup for SonarCloud scanner
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'temurin'
    
    - name: Cache SonarQube packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    
    # Run SonarCloud analysis using the root configuration
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.verbose=true
          -Dsonar.projectKey=petrmac_crushlog-data-format-spec
          -Dsonar.organization=petrmacek
          -Dsonar.projectName="CrushLog Data Format Specification"
          -Dsonar.modules=java,dart
          -Djava.sonar.projectBaseDir=clients/java
          -Djava.sonar.sources=cldf-java/src/main/java,cldf-tool/src/main/java
          -Djava.sonar.tests=cldf-java/src/test,cldf-tool/src/test
          -Djava.sonar.java.binaries=cldf-java/build/classes/java/main,cldf-tool/build/classes/java/main
          -Djava.sonar.coverage.jacoco.xmlReportPaths=cldf-java/build/reports/jacoco/test/jacocoTestReport.xml,cldf-tool/build/reports/jacoco/test/jacocoTestReport.xml
          -Ddart.sonar.projectBaseDir=clients/dart/cldf
          -Ddart.sonar.sources=lib
          -Ddart.sonar.tests=test
          -Ddart.sonar.exclusions=**/*.g.dart,**/*.freezed.dart,**/*.mocks.dart,**/generated/**
          -Ddart.sonar.language=dart
          -Ddart.sonar.dart.coverage.reportPath=coverage/lcov.info
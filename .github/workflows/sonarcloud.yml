name: SonarCloud Analysis

on:
  workflow_run:
    workflows: ["Java CI", "Dart CI"]
    types:
      - completed
    branches: [ main, develop ]

jobs:
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    if: >
      github.event.workflow_run.event == 'push' && 
      github.event.workflow_run.conclusion == 'success'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis
    
    # Download Java coverage artifacts
    - name: Download Java coverage
      uses: actions/github-script@v7
      with:
        script: |
          let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
             owner: context.repo.owner,
             repo: context.repo.repo,
             run_id: context.payload.workflow_run.id,
          });
          let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
            return artifact.name == "java-coverage-reports"
          })[0];
          if (matchArtifact) {
            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/java-coverage.zip`, Buffer.from(download.data));
          } else {
            console.log('No Java coverage artifact found');
          }
    
    - name: Extract Java coverage
      run: |
        if [ -f java-coverage.zip ]; then
          unzip -o java-coverage.zip -d clients/java/
          echo "Java coverage extracted"
        else
          echo "No Java coverage to extract"
        fi
    
    # Download Dart coverage artifacts
    - name: Download Dart coverage
      uses: actions/github-script@v7
      with:
        script: |
          let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
             owner: context.repo.owner,
             repo: context.repo.repo,
             run_id: context.payload.workflow_run.id,
          });
          let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
            return artifact.name == "dart-coverage-reports"
          })[0];
          if (matchArtifact) {
            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/dart-coverage.zip`, Buffer.from(download.data));
          } else {
            console.log('No Dart coverage artifact found');
          }
    
    - name: Extract Dart coverage
      run: |
        if [ -f dart-coverage.zip ]; then
          mkdir -p clients/dart/cldf/coverage
          unzip -o dart-coverage.zip -d clients/dart/cldf/coverage/
          echo "Dart coverage extracted"
        else
          echo "No Dart coverage to extract"
        fi
    
    # Java Setup for SonarCloud scanner
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: 21
        distribution: 'temurin'
    
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Cache SonarQube packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    
    # Build Java project to generate binaries needed for analysis
    - name: Build Java project
      working-directory: clients/java
      run: |
        chmod +x gradlew
        mkdir -p cldf-java/src/main/resources
        rm -rf cldf-java/src/main/resources/schemas
        cp -r ../../schemas cldf-java/src/main/resources/
        ./gradlew build -x test
    
    # Run SonarCloud analysis using Gradle for Java only first
    - name: Run SonarCloud Analysis for Java
      working-directory: clients/java
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        ./gradlew sonar \
          -Dsonar.projectKey=petrmac_crushlog-data-format-spec \
          -Dsonar.organization=petrmacek \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.projectName="CrushLog Data Format Specification" \
          -Dsonar.projectVersion=1.1.1 \
          --info
    
    # Run separate analysis for Dart using SonarScanner
    - name: Analyze Dart with SonarCloud
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        projectBaseDir: clients/dart/cldf
        args: >
          -Dsonar.projectKey=petrmac_crushlog-data-format-spec-dart
          -Dsonar.organization=petrmacek
          -Dsonar.projectName="CLDF Dart Client"
          -Dsonar.sources=lib
          -Dsonar.tests=test
          -Dsonar.exclusions=**/*.g.dart,**/*.freezed.dart,**/*.mocks.dart,**/generated/**
          -Dsonar.language=dart
          -Dsonar.dart.coverage.reportPath=coverage/lcov.info
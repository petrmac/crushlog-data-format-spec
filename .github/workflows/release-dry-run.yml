name: Release Dry Run

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to test (e.g., 1.2.3)'
        required: true
        type: string
  pull_request:
    paths:
      - '.github/workflows/release.yml'
      - '.github/workflows/release-dry-run.yml'
      - 'clients/java/**'
      - 'clients/dart/**'

jobs:
  validate-version:
    name: Validate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.validate.outputs.version }}
      version_tag: ${{ steps.validate.outputs.version_tag }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set version
      id: set_version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          # For PR, use a test version
          VERSION="0.0.0-test${{ github.run_number }}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Validate version format
      id: validate
      run: |
        VERSION="${{ steps.set_version.outputs.version }}"
        
        # Validate semantic version format
        if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "Error: Version must be in semantic version format"
          exit 1
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "version_tag=v$VERSION" >> $GITHUB_OUTPUT
        echo "✓ Version $VERSION is valid"

  test-java-build:
    name: Test Java Build & Publishing (Dry Run)
    needs: validate-version
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: 21
        distribution: 'temurin'
    
    - name: Update version
      working-directory: clients/java
      run: |
        VERSION="${{ needs.validate-version.outputs.version }}"
        sed -i "s/version = \"[0-9.]*\"/version = \"$VERSION\"/" build.gradle.kts
        sed -i "s/version = \"[0-9.]*\"/version = \"$VERSION\"/" cldf-java/build.gradle.kts
        sed -i "s/version = \"[0-9.]*\"/version = \"$VERSION\"/" cldf-tool/build.gradle.kts
    
    - name: Copy schemas
      working-directory: clients/java
      run: |
        mkdir -p cldf-java/src/main/resources
        rm -rf cldf-java/src/main/resources/schemas
        cp -r ../../schemas cldf-java/src/main/resources/
    
    - name: Build and test
      working-directory: clients/java
      run: |
        chmod +x gradlew
        ./gradlew clean build
    
    - name: Test publishing setup (dry run)
      working-directory: clients/java
      run: |
        # Just verify the publishing configuration is valid
        ./gradlew publishToMavenLocal
        echo "✓ Java publishing configuration is valid"
    
    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      with:
        name: java-test-artifacts
        path: |
          clients/java/cldf-java/build/libs/*.jar
          clients/java/cldf-tool/build/distributions/*.tar
          clients/java/cldf-tool/build/distributions/*.zip
        retention-days: 1

  test-dart-build:
    name: Test Dart Build & Publishing (Dry Run)
    needs: validate-version
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Dart SDK
      uses: dart-lang/setup-dart@v1
      with:
        sdk: stable
    
    - name: Update version
      working-directory: clients/dart/cldf
      run: |
        VERSION="${{ needs.validate-version.outputs.version }}"
        sed -i "s/^version: .*/version: $VERSION/" pubspec.yaml
    
    - name: Install dependencies
      working-directory: clients/dart/cldf
      run: |
        dart pub get
        dart run build_runner build --delete-conflicting-outputs
    
    - name: Run tests
      working-directory: clients/dart/cldf
      run: dart test
    
    - name: Test publishing setup (dry run)
      working-directory: clients/dart/cldf
      run: |
        dart pub publish --dry-run
        echo "✓ Dart publishing configuration is valid"

  test-release-notes:
    name: Test Release Notes Generation
    needs: [validate-version, test-java-build, test-dart-build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Generate test release notes
      run: |
        VERSION="${{ needs.validate-version.outputs.version }}"
        cat << EOF
        # Test Release Notes for CLDF ${VERSION}
        
        ## This is a dry run test
        
        The following would be published:
        
        ### Java
        - Maven Central: io.cldf:cldf-java:${VERSION}
        - CLI Tool: cldf-tool-${VERSION}.tar / .zip
        
        ### Dart
        - pub.dev: cldf:${VERSION}
        
        ## Validation Results
        
        ✓ Version format validated
        ✓ Java build successful
        ✓ Java publishing configuration valid
        ✓ Dart build successful
        ✓ Dart publishing configuration valid
        
        ## Note
        
        This is a dry run. No packages were actually published.
        No git tags were created.
        EOF

  summary:
    name: Dry Run Summary
    needs: [validate-version, test-java-build, test-dart-build, test-release-notes]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Summary
      run: |
        echo "## Release Dry Run Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version**: ${{ needs.validate-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.test-java-build.result }}" == "success" ]; then
          echo "✅ Java build and publishing configuration validated" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Java build or publishing configuration failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.test-dart-build.result }}" == "success" ]; then
          echo "✅ Dart build and publishing configuration validated" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Dart build or publishing configuration failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "If all checks passed, you can proceed with the actual release using the 'Release and Publish' workflow." >> $GITHUB_STEP_SUMMARY
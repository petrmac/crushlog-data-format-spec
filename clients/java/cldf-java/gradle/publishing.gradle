// Maven publishing configuration for cldf-java library

apply plugin: 'maven-publish'
apply plugin: 'signing'

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            
            groupId = 'io.cldf'
            artifactId = 'cldf-java'
            
            pom {
                name = 'CLDF Java'
                description = 'Java implementation of the CrushLog Data Format (CLDF) specification'
                url = 'https://github.com/petrmac/crushlog-data-format-spec'
                
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                
                developers {
                    developer {
                        id = 'petrmac'
                        name = 'Petr Macek'
                        email = 'petr@crushlog.com'
                    }
                }
                
                scm {
                    connection = 'scm:git:git://github.com/petrmac/crushlog-data-format-spec.git'
                    developerConnection = 'scm:git:ssh://github.com:petrmac/crushlog-data-format-spec.git'
                    url = 'https://github.com/petrmac/crushlog-data-format-spec'
                }
            }
        }
    }
    
    repositories {
        maven {
            name = "OSSRH"
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            
            credentials {
                username = System.getenv("MAVEN_USERNAME") ?: project.findProperty("ossrhUsername")
                password = System.getenv("MAVEN_PASSWORD") ?: project.findProperty("ossrhPassword")
            }
        }
    }
}

signing {
    def signingKey = System.getenv("MAVEN_GPG_PRIVATE_KEY") ?: project.findProperty("signingKey")
    def signingPassword = System.getenv("MAVEN_GPG_PASSPHRASE") ?: project.findProperty("signingPassword")
    
    if (signingKey && signingPassword) {
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.maven
    }
}

// Only sign if we're publishing
tasks.withType(Sign) {
    onlyIf {
        gradle.taskGraph.hasTask("publishToSonatype") || 
        gradle.taskGraph.hasTask("publishMavenPublicationToOSSRHRepository")
    }
}